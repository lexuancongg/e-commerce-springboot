package com.lexuancong.search.service;

import co.elastic.clients.elasticsearch._types.aggregations.Aggregation;
import com.lexuancong.search.constant.ProductField;
import com.lexuancong.search.viewmodel.ProductPagingVm;
import com.lexuancong.search.viewmodel.ProductQueryParams;
import org.elasticsearch.common.unit.Fuzziness;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.elasticsearch.client.elc.NativeQuery;
import org.springframework.data.elasticsearch.client.elc.NativeQueryBuilder;
import org.springframework.data.elasticsearch.core.ElasticsearchOperations;
import org.springframework.data.elasticsearch.core.query.Query;
import org.springframework.stereotype.Service;

@Service
public class ProductService {
    // tuong tac voi elasticsearch
    private final ElasticsearchOperations elasticsearchOperations;
    public ProductService(ElasticsearchOperations elasticsearchOperations) {
        this.elasticsearchOperations = elasticsearchOperations;
    }

    private ProductPagingVm findProductsByCriteria(ProductQueryParams productQueryParams){
        NativeQueryBuilder  nativeQueryBuilder = NativeQuery.builder()
                // theem cacs ƒëi·ªÅu ki·ªán v√†o truy vaans
                .withQuery(query ->  query
                        // truy v·∫•n k·∫øt h·ª£p nhi·ªÅu dk
                                .bool(boolQuery -> boolQuery
                                        // nh∆∞ or , kh·ªõp th√¨ t·ªët -> tƒÉng ƒëi·ªÉm cho docoment th·ªèa m·∫£n
                                        .should(shouldQuery -> shouldQuery
                                                // t√¨m ki·∫øm tr√™n nhi·ªÅu tr∆∞·ªùng
                                                .multiMatch(multiMatchQuery -> multiMatchQuery
                                                        .fields(ProductField.NAME , ProductField.BRAND , ProductField.CATEGORIES)
                                                        .query(productQueryParams.keyword())
                                                        // t√¨m kieems g·∫ßn ƒë√∫ng
                                                        .fuzziness(Fuzziness.ONE.toString())
                                                )
                                        )
                                )
                )
                .withPageable(PageRequest.of(productQueryParams.pageIndex(), productQueryParams.pageSize()));

        // th√™m b·ªô l·ªçc v√†o truy v·∫•n => kh√¥ng ·∫£nh h∆∞·ªüng ƒëi·ªÉm , ch·ªâ quy·∫øt ƒë·ªãnh xem document ƒë√≥ c√≥ ƒëc ƒë∆∞a v√†o kq kh√¥ng th√¥i
        nativeQueryBuilder.withFilter(filterQuery -> filterQuery
                .bool(boolQuery -> boolQuery
                ))


    }
}

//// doc
//Query l√† ƒë·ªëi t∆∞·ª£ng ƒë·∫°i di·ªán cho truy v·∫•n th·ª±c t·∫ø trong Elasticsearch. M·ªói truy v·∫•n trong Elasticsearch c√≥ th·ªÉ l√† m·ªôt lo·∫°i truy v·∫•n kh√°c nhau nh∆∞ match, term, range, bool, v.v.
// Query bao g·ªìm c√°c th√¥ng tin v·ªÅ lo·∫°i truy v·∫•n v√† c√°c ƒëi·ªÅu ki·ªán t√¨m ki·∫øm.

// v√≠ d·ª•
//Match Query: T√¨m ki·∫øm c√°c t√†i li·ªáu c√≥ ch·ª©a t·ª´ kh√≥a trong m·ªôt tr∆∞·ªùng nh·∫•t ƒë·ªãnh.
//Term Query: T√¨m ki·∫øm c√°c t√†i li·ªáu c√≥ gi√° tr·ªã ch√≠nh x√°c cho m·ªôt tr∆∞·ªùng c·ª• th·ªÉ.
//Range Query: T√¨m ki·∫øm c√°c t√†i li·ªáu c√≥ gi√° tr·ªã trong m·ªôt kho·∫£ng.



//2. QueryBuilder
//QueryBuilder l√† l·ªõp c∆° s·ªü ƒë·ªÉ x√¢y d·ª±ng c√°c truy v·∫•n trong Elasticsearch. C√°c l·ªõp con c·ªßa QueryBuilder nh∆∞ BoolQueryBuilder, TermQueryBuilder, MatchQueryBuilder, v.v.
// cho ph√©p b·∫°n d·ªÖ d√†ng x√¢y d·ª±ng truy v·∫•n Elasticsearch.
// V√≠ d·ª•,
//BoolQueryBuilder gi√∫p b·∫°n x√¢y d·ª±ng m·ªôt truy v·∫•n bool v·ªõi c√°c ƒëi·ªÅu ki·ªán must, should, must_not, v√† filter.

//
//NativeQueryBuilder: D√πng trong Spring Data Elasticsearch ƒë·ªÉ x√¢y d·ª±ng c√°c truy v·∫•n t√πy ch·ªânh.
//
//SearchRequest v√† SearchSourceBuilder: D√πng trong Elasticsearch Java Client ƒë·ªÉ x√¢y d·ª±ng v√† g·ª≠i c√°c y√™u c·∫ßu t√¨m ki·∫øm.












//üß± 1. C√°c ƒë·ªëi t∆∞·ª£ng c·ªët l√µi
//ƒê·ªëi t∆∞·ª£ng	√ù nghƒ©a
//Query	ƒê·∫°i di·ªán cho ƒëi·ªÅu ki·ªán t√¨m ki·∫øm
//NativeQueryBuilder	D√πng ƒë·ªÉ build truy v·∫•n Query t√πy ch·ªânh
//BoolQuery	D√πng ƒë·ªÉ k·∫øt h·ª£p nhi·ªÅu ƒëi·ªÅu ki·ªán (must, should, must_not, filter)
//Aggregation	D√πng ƒë·ªÉ ph√¢n nh√≥m, ƒë·∫øm, t√≠nh to√°n...
//SearchHits	K·∫øt qu·∫£ t√¨m ki·∫øm tr·∫£ v·ªÅ
//SearchHit<T>	M·ªôt item trong danh s√°ch k·∫øt qu·∫£
//ElasticsearchOperations	Cung c·∫•p method ƒë·ªÉ thao t√°c v·ªõi Elasticsearch
//
//üîç 2. C√°c method hay d√πng
//Method	√ù nghƒ©a
//match(field, value)	T√¨m ki·∫øm t∆∞∆°ng ƒë·ªëi (ph√¢n t√≠ch t·ª´)
//term(field, value)	T√¨m ki·∫øm ch√≠nh x√°c
//terms(field, List<value>)	T√¨m theo nhi·ªÅu gi√° tr·ªã
//range(...)	T√¨m trong kho·∫£ng (>, <, >=, <=)
//bool(...)	K·∫øt h·ª£p nhi·ªÅu ƒëi·ªÅu ki·ªán
//withQuery(...)	Truy·ªÅn ƒëi·ªÅu ki·ªán v√†o truy v·∫•n
//withAggregation(...)	Truy·ªÅn ƒëi·ªÅu ki·ªán ph√¢n nh√≥m
//withSort(...)	Th√™m s·∫Øp x·∫øp
//withPageable(...)	Th√™m ph√¢n trang
//
//üìñ 3. C√°c t·ª´ kh√≥a ƒëi·ªÅu ki·ªán
//T·ª´ kh√≥a	√ù nghƒ©a
//must	B·∫Øt bu·ªôc ph·∫£i th·ªèa ƒëi·ªÅu ki·ªán
//should	C√≥ th√¨ t·ªët, kh√¥ng c√≥ c≈©ng ƒë∆∞·ª£c
//must_not	Kh√¥ng ƒë∆∞·ª£c th·ªèa ƒëi·ªÅu ki·ªán
//filter	Gi·ªëng must nh∆∞ng kh√¥ng t√≠nh ƒëi·ªÉm relevance (nhanh h∆°n)
//
//üß™ 4. V√≠ d·ª• ƒë∆°n gi·∫£n
//java
//        Copy
//Edit
//Query query = QueryBuilders.bool()
//        .must(QueryBuilders.match("name", "iphone"))
//        .filter(QueryBuilders.term("categoryId", "123"));
//
//NativeQuery searchQuery = NativeQuery.builder()
//        .withQuery(query)
//        .build();
//
//SearchHits<Product> hits = elasticsearchOperations.search(searchQuery, Product.class);
//
//



//
//1. Truy v·∫•n c∆° b·∫£n:
//term
//
//        match
//
//multi_match
//
//        range
//
//wildcard
//
//        fuzzy
//
//prefix
//
//        query_string
//
//simple_query_string
//
//2. Truy v·∫•n k·∫øt h·ª£p (Boolean Queries):
//bool
//
//        must
//
//must_not
//
//        should
//
//filter
//
//3. Truy v·∫•n n√¢ng cao:
//boosting
//
//        constant_score
//
//dis_max
//
//        span_near
//
//span_term
//
//        span_first
//
//4. Truy v·∫•n cho d·ªØ li·ªáu l·ªìng nhau (Nested Queries):
//nested
//
//        has_child
//
//has_parent
//
//5. Truy v·∫•n cho v·ªã tr√≠ ƒë·ªãa l√Ω:
//geo_distance
//
//        geo_bounding_box
//
//geo_polygon
//
//        geo_shape
//
//6. Truy v·∫•n cho ph√¢n t√≠ch d·ªØ li·ªáu (Aggregations & Other):
//aggregations
//
//        top_hits
//
//more_like_this
//
//7. Truy v·∫•n ki·ªÉm tra s·ª± t·ªìn t·∫°i:
//exists
//
//8. Truy v·∫•n theo ID:
//ids
//
//9. Truy v·∫•n cho s·ª± li√™n quan (Similarity & Scoring):
//boosting
